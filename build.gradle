apply plugin: 'java'

project.ext {
    cucumberVersion = '4.2.5'
}

dependencies {
    testCompile 'io.cucumber:cucumber-java:' + cucumberVersion
    testCompile 'io.cucumber:cucumber-junit:' + cucumberVersion
    compile group: 'io.rest-assured', name: 'rest-assured', version: '4.1.1'
    compile group: 'junit', name: 'junit', version: '4.12'
    compile 'com.codeborne:selenide:4.9.1'
    compile "org.assertj:assertj-core:3.11.1"
    compile group: 'io.cucumber', name: 'datatable', version: '1.0.3'
    compile group: 'org.json', name: 'json', version: '20190722'
    compile group: 'com.github.javafaker', name: 'javafaker', version: '1.0.1'
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1'
    compile group: 'net.masterthought', name: 'cucumber-reporting', version: '4.11.2'
    compile group: 'io.rest-assured', name: 'rest-assured', version: '4.1.2'


}

repositories {
    mavenCentral()
}

configurations {
    cucumberRuntime {
        extendsFrom testRuntime
    }
}
task regression() {
    dependsOn assemble, compileJava
    doLast {
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--glue', 'com.oracle.babylon', 'src/test/resources/com/oracle/babylon/']
        }
    }
}

task mail() {
    dependsOn assemble, compileJava
    doLast {
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--glue', 'com.oracle.babylon', 'src/test/resources/com/oracle/babylon/features/mail']
        }
    }
}
    task login() {
        dependsOn assemble, compileJava
        doLast {
            javaexec {
                main = "cucumber.api.cli.Main"
                classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
                args = ['--plugin', 'pretty', '--glue', 'com.oracle.babylon', 'src/test/resources/com/oracle/babylon/features/login.feature']
            }
        }
    }
//
//task dockerCreateHub(type: Exec) {
//    executable = "docker"
//    args = [ "run -d -p 4444:4444",  "--name selenium-hub", "selenium/hub:3.6.0", "selenium-node2"]
//}
//task dockerCreateNode(type: Exec) {
//    executable = "docker"
//    args = [ "run -d -P -p 5902:5902",  "--name selenium-node", "--link selenium-hub:hub", "selenium/node-chrome-debug:3.6.0"]
//}
//
//task dockerStart(dependsOn:['dockerCreateHub','dockerCreateNode'],type: Exec) {
//    executable = "docker"
//    args = ["start", "selenium-hub", "selenium-node2"]
//}

task dockerStart(type: Exec) {
    executable = "docker"
    args = ["start", "selenium-hub", "selenium-node2"]
}
task dockerStop(type: Exec) {
    executable = "docker"
    args = ["stop", "selenium-hub", "selenium-node2"]
}

task testWithDocker(dependsOn: ['dockerStart', 'mail'])

testWithDocker.finalizedBy dockerStop
